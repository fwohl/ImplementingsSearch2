

    using namespace std::chrono;
    auto start = high_resolution_clock::now();
    struct rusage r_usage;
    auto res2 = seqan3::search(queries, index);
    for (auto && result : res2)
            seqan3::debug_stream <<result << '\n';
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);

    std::cout << "Time taken by searching in FM-Index for: " << number_of_queries << " many queries "
         << duration.count() << " microseconds" << std::endl;
    getrusage(RUSAGE_SELF, &r_usage);
    printf("Memory usage = %ld\n", r_usage.ru_maxrss);
    //int i=0;
    //for (auto & q : queries){
      //  std::cout<<"iteration :" <<i;
        //auto res = seqan3::search(q, index,cfg2);
        //for (auto && result : res)
        //      seqan3::debug_stream << result << '\n';
        //std::cout<<std::endl;
        //i++;
   // }
    //!TODO !ImplementMe use the seqan3::search function to search
    seqan3::configuration const cfg = seqan3::search_cfg::max_error_total{seqan3::search_cfg::error_count{number_of_errors}};

    return 0;
}
